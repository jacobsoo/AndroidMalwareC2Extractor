#!/usr/bin/python

'''
    C&C extractor for SpyNote v2
    by Jacob Soo Lead Re 

    Hashes for samples:
    4ef84e1af53bd7814a7faee16e7f5722c142e2be7bce58af2206706036fd1041
    6dba1e319e4c2f2f0adc930cacfb0682b00ba36470b0410d380468dfc4090542
    0e26d3a6e5b45b90a71ec0c615cd68984557bf45d4b177cc55ce39674c11aed1
    7d53181191329113cce83c99709171070d560ddba9dbf22c934343e822f8c5a8
    162386a4b7fa034183deaa5cb7d5415229d2040b0cbd2880291e05af92c603df
'''

__author__ = "Jacob Soo Lead Re"
__version__ = "0.1"

import zipfile, sys, os
import base64, urllib
import argparse
from sys import argv
from androguard.core.bytecodes import apk
from androguard.core.bytecodes import dvm

#---------------------------------------------------
# isNotEmpty : Checks whether string is empty
#---------------------------------------------------
def isNotEmpty(s):
    return bool(s and s.strip())

#---------------------------------------------------
# _log : Prints out logs for debug purposes
#---------------------------------------------------
def _log(s):
    print(s)

#-----------------------------------------------------------------
# extract_config : This extracts the C&C information from AhMyth.
#-----------------------------------------------------------------
def extract_config(apkfile):
    try:
        a = apk.APK(apkfile)
        d = dvm.DalvikVMFormat(a.get_dex())
        r = a.get_android_resources()
        package_name = a.get_package()
        app_name = ''
        app_name = r.get_string(package_name, "host", "\x00\x00")
        if app_name is not None:
            if isNotEmpty(app_name[1]):
                dat = app_name[1].split(",")
                _log('[+] Extracting from %s' % (apkfile))
                _log('[+] C&C: [ %s:%s ]' % (dat[0], dat[1]))
    except:
        pass

#-------------------------------------------------------------
# check_apk_file : Shitty Check whether file is a apk file.
#-------------------------------------------------------------
def check_apk_file(apk_file):
    bJar = False
    try:
        zf = zipfile.ZipFile(apk_file, 'r')
        lst = zf.infolist()
        for zi in lst:
            fn = zi.filename
            if fn.lower()=='androidmanifest.xml':
                bJar = True
                return bJar
    except:
        return bJar

#-------------------------------------------------------------
# logo : Ascii Logos like the 90s. :P
#-------------------------------------------------------------
def logo():
    print('\n')
    print(' ______     __  __     __     ______   ______        ______     ______     ______     __  __     ______     __   __   ')
    print('/\  ___\   /\ \_\ \   /\ \   /\__  _\ /\  ___\      /\  == \   /\  == \   /\  __ \   /\ \/ /    /\  ___\   /\ "-.\ \  ')
    print('\ \___  \  \ \  __ \  \ \ \  \/_/\ \/ \ \___  \     \ \  __<   \ \  __<   \ \ \/\ \  \ \  _"-.  \ \  __\   \ \ \-.  \ ')
    print(' \/\_____\  \ \_\ \_\  \ \_\    \ \_\  \/\_____\     \ \_____\  \ \_\ \_\  \ \_____\  \ \_\ \_\  \ \_____\  \ \_\\\\"\_\\')
    print('  \/_____/   \/_/\/_/   \/_/     \/_/   \/_____/      \/_____/   \/_/ /_/   \/_____/   \/_/\/_/   \/_____/   \/_/ \/_/')
    print('\n')
    print(" Find the C&C for this SpyNote v2 mallie!")
    print(" Jacob Soo")
    print(" Copyright (c) 2018\n")
                                                                                                                      

if __name__ == "__main__":
    description='C&C Extraction tool for SpyNote v2'
    parser = argparse.ArgumentParser(description=description,
                                     epilog='--file and --directory are mutually exclusive')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-f','--file',action='store',nargs=1,dest='szFilename',help='filename',metavar="filename")
    group.add_argument('-d','--directory',action='store',nargs=1,dest='szDirectory',help='Location of directory.',metavar='directory')

    args = parser.parse_args()
    Filename = args.szFilename
    Directory = args.szDirectory
    is_file = False
    is_dir = False
    try:
        is_file = os.path.isfile(Filename[0])
    except:
        pass
    try:
        is_dir = os.path.isdir(Directory[0])
    except:
        pass
    logo()
    if Filename is not None and is_file:
        if check_apk_file(Filename[0])==True:
            extract_config(Filename[0])
        else:
            _log("[-] This is not a valid apk file : %s" % Filename[0])
    if Directory is not None and is_dir:
        for root, directories, filenames in os.walk(Directory[0]):
            for filename in filenames: 
                szFile = os.path.join(root,filename) 
                if check_apk_file(szFile)==True:
                    extract_config(szFile)
                else:
                    _log("[-] This is not a valid apk file : %s" % szFile)
